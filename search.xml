<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hexo及next配置进阶-定制化博客</title>
    <url>/2020/03/01/hexo_3_hexo%E5%8F%8Anext%E9%85%8D%E7%BD%AE%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<h2 id="博客名字体的配置"><a href="#博客名字体的配置" class="headerlink" title="博客名字体的配置"></a>博客名字体的配置</h2><p>目标是把博客的名字的字体更改。</p>
<p>这部分的设置可以在theme的配置种修改。</p>
<p>themes\next_config.yml</p>
<p>如下，我将字体改为华文隶书。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Font settings for site title (.site-title).</span></span><br><span class="line"><span class="attr">title:</span></span><br><span class="line">  <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">family:</span> <span class="string">华文隶书</span> <span class="comment">#Roboto Slab</span></span><br><span class="line">  <span class="attr">size:</span> <span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>依次类推，比如文章标题 正文等等的字体和大小的设置也可以在这部分配置种实现。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title>关于自我提升方法论</title>
    <url>/2020/02/29/001.%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E8%AE%BA/</url>
    <content><![CDATA[<p>在这个日新月异的时代，似乎每天如果不有点进步似乎都不好意思出门见人，</p>
<p>也更不好意思，谈理想和人生。</p>
<p>汤铭有云:苟日新,日日新,又日新!</p>
<p>你我或许是稚子顽童，青年才俊 亦或许是老骥伏枥，均可意气风发，志在千里。</p>
<p>但千里之行，终须始于足下，</p>
<p>万丈高楼也需凭地基而起，</p>
<p>像大海一样的事业也是靠江河小流聚势而成。</p>
<p>《大学》里说： 物有本末，事有终始，知所先后，则近道矣。</p>
<p>本系列的目标即是研究，学习之道，自我提升之方法论。</p>
<p>欢迎一起参禅悟道，勇攀高峰！</p>
<p>我是晓光，希望能和你相伴。公众号：猫爪在线</p>
]]></content>
      <categories>
        <category>自我提升方法论</category>
      </categories>
  </entry>
  <entry>
    <title>写博客的好处</title>
    <url>/2020/02/28/hexo_1_%E5%86%99%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%A5%BD%E5%A4%84/</url>
    <content><![CDATA[<h3 id><a href="#" class="headerlink" title></a></h3><p>古人说:  格物、致知、诚意、正心 ， 修身、齐家、治国、平天下 。</p>
<p>古人又说：   立德、立功、立言 ，三不朽。  写博客也算立言的开始吧。</p>
<p>我觉得这是金玉良言啊。</p>
<p>那么咱们谈谈，我觉得写博客的好处具体有那些？</p>
<ol>
<li>教学相长</li>
<li>加深对技术和概念的理解；</li>
<li>提高思维能力，和逻辑能力；</li>
<li>提高沟通能力，每一篇文章都是一次自我沟通的开始。</li>
<li>方便查阅以后用的到；</li>
<li>可以看到多年之前的文章/想法/当时对技术的理解。</li>
<li>获取阅读量，得到认可，提高知名度；</li>
<li>结交志同道合的人，结伴前行；</li>
<li>提高写作水平,文案水平；</li>
<li>为自己的人生留下只言片语；</li>
<li>碎片化学习；</li>
</ol>
<p>如果你对独立博客感兴趣，可以加入群聊。一起交流</p>
<p> 独立博客爱好群QQ群: 1071329826 </p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title>基于hexo免费搭建个人独立博客</title>
    <url>/2020/02/27/%E5%9F%BA%E4%BA%8Ehexo%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id><a href="#" class="headerlink" title></a></h2><h3 id="本系列目标"><a href="#本系列目标" class="headerlink" title="本系列目标"></a>本系列目标</h3><p>免费搭建一个静态独立博客。</p>
<p>关键词： 免费，静态独立博客。</p>
<h3 id="GitHub创建个人仓库"><a href="#GitHub创建个人仓库" class="headerlink" title="GitHub创建个人仓库"></a>GitHub创建个人仓库</h3><p>免费的问题是通过GitHub解决的，Github有提供相关的免费服务，我们基于此可以构建免费的静态独立博客。</p>
<p>登录到 GitHub ，如果没有 GitHub 帐号，请使用你的邮箱注册 GitHub 帐号：<a href="https://github.com/join?source=header-home" target="_blank" rel="noopener">https://github.com/join?source=header-home</a></p>
<p> 登录成功之后，点击 GitHub 中的 New repository 创建新仓库，仓库名应该为：<strong>用户名</strong>.github.io 。这里<strong>用户名</strong>使用你的 GitHub 帐号名称代替，这是固定写法。 </p>
<h3 id="使用git配置key免密码访问"><a href="#使用git配置key免密码访问" class="headerlink" title="使用git配置key免密码访问"></a>使用git配置key免密码访问</h3><p>Git 是目前世界上最先进的分布式版本控制系统（没有之一）。这是使用 Git 的目的是为了将我们的网站从本地提交上服务器（GitHub）上面去。我认为 Git 操作是程序员应该具备的一个基本操作，具体的 Git 操作细节可以查看廖雪峰的教程，讲的十分详细 <a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000</a></p>
<p> 安装好 Git 后，只需要进行下面的配置即可 </p>
<h4 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h4><p>在终端进行操作，设置 user.name 和 user.email 配置信息，我这里设置为全局。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;你的GitHub用户名&quot;</span><br><span class="line">git config --global user.email &quot;你的GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure>

<h4 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h4><p>通过注册的邮箱生成 ssh 密钥文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure>

<p> 然后直接三个回车即可，默认不需要设置密码。最后得到了两个文件：<code>id_rsa</code>和<code>id_rsa.pub</code>。 </p>
<p> 打开 <code>id_rsa.pub 文件</code>，将里面的内容全部复制。 </p>
<h4 id="配置到GitHub"><a href="#配置到GitHub" class="headerlink" title="配置到GitHub"></a>配置到GitHub</h4><p>登录自己的Github，选择 setting -&gt; SSH and GPG keys </p>
<p>在SSH keys 项中 点击 New SSH key 按钮</p>
<p>Title可以随便填， key中 拷贝入刚才在<code>id_rsa.pub 文件</code> 拷贝的内容</p>
<p>点击Add SSH key 配置完成。</p>
<h4 id="测试GitHub-SSH"><a href="#测试GitHub-SSH" class="headerlink" title="测试GitHub SSH"></a>测试GitHub SSH</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p>显示如下代表OK</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">λ ssh -T git@github.com</span><br><span class="line">Hi frank2019! You&#39;ve successfully authenticated, but GitHub does not provide shell access</span><br></pre></td></tr></table></figure>



<h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>Hexo 基于 Node.js，因此需要先安装 Node.js，你可以在这里进行对应电脑版本的下载：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a></p>
<h3 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>



<h3 id="Hexo使用"><a href="#Hexo使用" class="headerlink" title="Hexo使用"></a>Hexo使用</h3><p>安装好 Hexo 后，马上就能使用了。首先初始化博客，输入：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">$ hexo <span class="keyword">init</span> myBlog</span><br></pre></td></tr></table></figure>

<p> 接下来，进入文件夹 <code>myBlog</code>,输入 </p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure>

<p>此时，在本地的你的博客已经运行起来，可以在浏览器中查看</p>
<p> 然后，打开浏览器输入地址： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">localhost:4000</span><br></pre></td></tr></table></figure>



<p>执行到这里事实上博客就已经搭建好了，接下来就是去完善它。</p>
<p>注意：下面的命令都是在 <code>myBlog</code>文件里进行操作的。</p>
<h3 id="添加文章"><a href="#添加文章" class="headerlink" title="添加文章"></a>添加文章</h3><h4 id="1-直接导入文章"><a href="#1-直接导入文章" class="headerlink" title="1.直接导入文章"></a>1.直接导入文章</h4><p>你可以将你平时写的文章直接导入到 <code>_posts</code>  文件夹里，注意文章类型得是 <code>md</code>格式。</p>
<h4 id="2-写新文章"><a href="#2-写新文章" class="headerlink" title="2.写新文章"></a>2.写新文章</h4><p>你可以执行下列命令来创建一篇新文章。</p>
<h3 id="生成网页"><a href="#生成网页" class="headerlink" title="生成网页"></a>生成网页</h3><p>使用 Hexo 生成静态文件快速而且简单。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">//简写 hexo g</span><br></pre></td></tr></table></figure>



<h3 id="启动服务预览文章"><a href="#启动服务预览文章" class="headerlink" title="启动服务预览文章"></a>启动服务预览文章</h3><p> 输入以下命令以启动服务器，你的网站会在 <code>http://localhost:4000</code> 下启动。在服务器启动期间，Hexo 会监视文件变动并自动更新，无须重启服务器。 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<p> 如果你想要更改端口，或是在执行时遇到了 <code>EADDRINUSE</code> 错误，可以在执行时使用 <code>-p</code> 选项指定其他端口，如下： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo server -p 5000</span><br></pre></td></tr></table></figure>



<h3 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new &quot;我的博客文章&quot; #新建文章</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate <span class="comment">#生成网页</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server <span class="comment">#启动服务预览</span></span><br></pre></td></tr></table></figure>

<p>这三个命令依次就是新建一篇博客文章、生成网页、在本地预览的操作。</p>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>Hexo 提供了快速方便的一键部署功能，只需一条命令就能将网站部署到服务器上。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p> 在开始之前，必须先在 <code>_config.yml</code> 中修改参数，一个正确的部署配置中至少要有 <code>type</code> 参数，例如： </p>
<p> 在<code>_config.yml</code>中进行修改。 </p>
<p>修改其中的deploy 为自己的内容。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;</span><br><span class="line">## Themes: https:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F;</span><br><span class="line">theme: landscape</span><br><span class="line"></span><br><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;frank2019&#x2F;frank2019.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>这一步的目的是将 Hexo 与 GitHub 进行关联。</p>
<p>配置好后通过</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p> 命令，稍等片刻，网站就已经部署好了，可以在浏览器输入<code>你的GitHub名称.github.io</code>，这样一个免费的博客就已经搭建好了。 </p>
<p>我的博客是</p>
<p><a href="https://frank2019.github.io/">https://frank2019.github.io/</a></p>
<h3 id="Hexo-主题"><a href="#Hexo-主题" class="headerlink" title="Hexo 主题"></a>Hexo 主题</h3><p>hexo 默认的主题可能显得有点呆板，你可以在 <a href="https://hexo.io/themes/index.html进行主题的挑选更换。将下好的主题安放在`themes`文件夹内，同时在`_config.yml`中进行主题修改就好了。" target="_blank" rel="noopener">https://hexo.io/themes/index.html进行主题的挑选更换。将下好的主题安放在`themes`文件夹内，同时在`_config.yml`中进行主题修改就好了。</a></p>
<p> 一般大佬们提供的主题都会提供文档说明，按照说明进行简单的设置就能拥有一个酷炫的页面了。 </p>
<h3 id="出错处理"><a href="#出错处理" class="headerlink" title="出错处理"></a>出错处理</h3><h4 id="ERROR-Deployer-not-found-git"><a href="#ERROR-Deployer-not-found-git" class="headerlink" title="ERROR Deployer not found: git"></a>ERROR Deployer not found: git</h4><p> hexo d<br> ERROR Deployer not found: git </p>
<p>执行以下命令即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>



<h4 id="Package-cheerio-is-not-installed"><a href="#Package-cheerio-is-not-installed" class="headerlink" title="Package cheerio is not installed."></a>Package cheerio is not installed.</h4><p>INFO  Checking dependencies<br>ERROR Package cheerio is not installed.<br>ERROR Please install the missing dependencies from the root directory of your Hexo site.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install cheerio</span><br><span class="line">npm WARN npm npm does not support Node.js v12.16.1</span><br><span class="line">npm WARN npm You should probably upgrade to a newer version of node as we</span><br><span class="line">npm WARN npm can&#39;t make any promises that npm will work with this version.</span><br><span class="line">npm WARN npm Supported releases of Node.js are the latest release of 6, 8, 9, 10, 11.</span><br><span class="line">npm WARN npm You can find the latest version at https:&#x2F;&#x2F;nodejs.org&#x2F;</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@2.1.2 (node_modules\fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.1.2: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.11 (node_modules\nunjucks\node_modules\fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.11: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)</span><br><span class="line"></span><br><span class="line">+ cheerio@1.0.0-rc.3</span><br><span class="line">added 16 packages from 47 contributors in 5.886s</span><br></pre></td></tr></table></figure>



<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://www.jianshu.com/p/bc7362959e25" target="_blank" rel="noopener">利用GitHub搭建一个酷炫免费的个人博客</a></li>
<li><a href="https://www.hexothe.me/" target="_blank" rel="noopener">排名前 10 的 Hexo 主题</a></li>
</ol>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title>我是谁?</title>
    <url>/2020/02/27/who-am-I/</url>
    <content><![CDATA[<h3 id="我是谁"><a href="#我是谁" class="headerlink" title="我是谁?"></a>我是谁?</h3><p>很高兴大家来到这里，我是‘东胜神州’博客</p>
<ul>
<li><p>在这里我会坚持优质的内容</p>
</li>
<li><p>坚持价值投资 </p>
</li>
<li><p>坚持长期主义 </p>
</li>
<li><p>热爱美食 旅行 编程  参禅悟道</p>
</li>
<li><p>坚持成就你我的梦想 </p>
</li>
<li><p>坚持知行合一(实践类的话题坚持打磨出个不错的(或实习)产品，有所得)</p>
</li>
<li><p>如切如磋,如琢如磨</p>
</li>
</ul>
<p>欢迎大家多提宝贵意见！  十分感谢!</p>
<h3 id="交流学习"><a href="#交流学习" class="headerlink" title="交流学习"></a>交流学习</h3><ul>
<li>独立博客爱好群QQ群: 1071329826 </li>
</ul>
<h3 id="我可以为你做什么"><a href="#我可以为你做什么" class="headerlink" title="我可以为你做什么?"></a>我可以为你做什么?</h3><h3 id="欢迎合作"><a href="#欢迎合作" class="headerlink" title="欢迎合作"></a>欢迎合作</h3><p>开放包容 锐意进取 合作共赢!</p>
<p>有好的想法或创意欢迎加我！</p>
<p>我的公众号:  猫爪在线</p>
<p>Email: <a href="mailto:frank2019@yeah.net">frank2019@yeah.net</a></p>
<p>QQ:454052811</p>
<p><img src="/2020/02/27/who-am-I/le.png" alt></p>
]]></content>
  </entry>
  <entry>
    <title>Dear ImGui library简介及入门</title>
    <url>/2020/02/27/Dear%20ImGui%20library%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="Dear-ImGui-library-简介"><a href="#Dear-ImGui-library-简介" class="headerlink" title="Dear ImGui library  简介"></a>Dear ImGui library  简介</h2><p>作为开发人员，我们都面临着向程序引入图形界面的痛苦。传统的GUI库增加了一定程度的复杂性，如果您正在制作用于调试的工具，则可能不需要这些复杂性。在这里，我们提供了一个库，使创建记录器、配置文件器、调试器甚至整个游戏编辑器成为可能。这里介绍的整个示例可在Github上查阅。</p>
<h3 id="Dear-ImGui"><a href="#Dear-ImGui" class="headerlink" title="Dear ImGui?"></a>Dear ImGui?</h3><p><a href="https://github.com/ocornut/imgui" target="_blank" rel="noopener">Dear ImGui</a> 是一个令人惊叹的C++ UI 库，主要应用在游戏开发。该项目是开源软件，基于MIT license。Dear ImGui专注于简单性和生产力，使用的是<a href="https://caseymuratori.com/blog_0001" target="_blank" rel="noopener">Inmediate Mode GUI paradigm</a>。</p>
<p>即时模式GUI不同于传统的保留模式界面，因为小部件是在每个帧上创建和绘制的，而传统的方法是首先创建小部件并向其添加回调。这种模式的一些好处是您的UI“更接近”您的数据，并且它允许快速原型化。</p>
<p>Dear ImGui主要设计用于开发人员在内容创建和调试工具中使用..它是渲染器不可知论的方式，您必须提供工具来呈现数据，但它非常容易集成到您自己的代码中，因为它有多个绑定的不同窗口和事件处理库（如GLFW，SDL2和GLUT）和多个渲染器（如OpenGL，DirectX和Vulkan）。</p>
<p>Dear ImGui配备了许多小部件，如窗口、标签、输入框、进度条、按钮、滑块、树等。你可以在下面的图片中看到一些例子。</p>
<p>![](Dear ImGui library简介及入门/conan-imgui-widgets.gif)</p>
<h3 id="在应用中集成Dear-ImGui"><a href="#在应用中集成Dear-ImGui" class="headerlink" title="在应用中集成Dear ImGui"></a>在应用中集成Dear ImGui</h3><p>ImGui的典型用途是当您已经有了一个启用3D管道的应用程序，如内容创建或游戏开发工具，您希望在其中添加GUI。让我们看看在我们的应用程序中集成ImGui是多么容易。我们的示例应用程序使用OpenGL3呈现三角形。我们将使用GLFW管理窗口创建和事件处理。由于ImGui独立于渲染系统和平台，我们必须为我们的渲染系统引入一些绑定。幸运的是， Dear ImGui的设计中包含预先的绑定，比如我们在使用的Dear ImGui v1.69中我们包含以下头文件:</p>
<ul>
<li><a href="https://github.com/ocornut/imgui/blob/v1.69/examples/imgui_impl_opengl3.cpp" target="_blank" rel="noopener">imgui_impl_opengl3.cpp</a></li>
<li><a href="https://github.com/ocornut/imgui/blob/v1.69/examples/imgui_impl_opengl3.h" target="_blank" rel="noopener">imgui_impl_opengl3.h</a></li>
<li><a href="https://github.com/ocornut/imgui/blob/v1.69/examples/imgui_impl_glfw.cpp" target="_blank" rel="noopener">imgui_impl_glfw.cpp</a></li>
<li><a href="https://github.com/ocornut/imgui/blob/v1.69/examples/imgui_impl_glfw.h" target="_blank" rel="noopener">imgui_impl_glfw.h</a></li>
</ul>
<p>使此工作的最小代码在main.cpp中。首先，初始化用于呈现的窗口，然后必须初始化DearImGui上下文以及助手平台和Renderer绑定。如果您愿意，也可以更改渲染样式。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Setup Dear ImGui context</span></span><br><span class="line">IMGUI_CHECKVERSION();</span><br><span class="line">ImGui::CreateContext();</span><br><span class="line">ImGuiIO &amp;io = ImGui::GetIO();</span><br><span class="line"><span class="comment">// Setup Platform/Renderer bindings</span></span><br><span class="line">ImGui_ImplGlfw_InitForOpenGL(window, <span class="literal">true</span>);</span><br><span class="line">ImGui_ImplOpenGL3_Init(glsl_version);</span><br><span class="line"><span class="comment">// Setup Dear ImGui style</span></span><br><span class="line">ImGui::StyleColorsDark();</span><br></pre></td></tr></table></figure>

<p>然后，您进入主应用程序循环，在那里您可以清楚地看到与经典保留模式GUI的区别。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (!glfwWindowShouldClose(window))</span><br><span class="line">&#123;</span><br><span class="line">    glfwPollEvents();</span><br><span class="line">    glClearColor(<span class="number">0.45f</span>, <span class="number">0.55f</span>, <span class="number">0.60f</span>, <span class="number">1.00f</span>);</span><br><span class="line">    glClear(GL_COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// feed inputs to dear imgui, start new frame</span></span><br><span class="line">    ImGui_ImplOpenGL3_NewFrame();</span><br><span class="line">    ImGui_ImplGlfw_NewFrame();</span><br><span class="line">    ImGui::NewFrame();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// rendering our geometries</span></span><br><span class="line">    triangle_shader.use();</span><br><span class="line">    glBindVertexArray(vao);</span><br><span class="line">    glDrawElements(GL_TRIANGLES, <span class="number">3</span>, GL_UNSIGNED_INT, <span class="number">0</span>);</span><br><span class="line">    glBindVertexArray(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// render your GUI</span></span><br><span class="line">    ImGui::Begin(<span class="string">"Demo window"</span>);</span><br><span class="line">    ImGui::Button(<span class="string">"Hello!"</span>);</span><br><span class="line">    ImGui::End();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Render dear imgui into screen</span></span><br><span class="line">    ImGui::Render();</span><br><span class="line">    ImGui_ImplOpenGL3_RenderDrawData(ImGui::GetDrawData());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> display_w, display_h;</span><br><span class="line">    glfwGetFramebufferSize(window, &amp;display_w, &amp;display_h);</span><br><span class="line">    glViewport(<span class="number">0</span>, <span class="number">0</span>, display_w, display_h);</span><br><span class="line">    glfwSwapBuffers(window);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当然，当循环结束时，做一些清理。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ImGui_ImplOpenGL3_Shutdown();</span><br><span class="line">ImGui_ImplGlfw_Shutdown();</span><br><span class="line">ImGui::DestroyContext();</span><br></pre></td></tr></table></figure>

<p>所以，这就是我们得到的：</p>
<p><img src="/2020/02/27/Dear%20ImGui%20library%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%85%A5%E9%97%A8/conan-imgui-hello-world.gif" alt></p>
<p>例如，让我们说，我们想要改变三角形的位置/方向和颜色。这就像调用一些滑块和选色器，并通过着色器将数据传递给三角形一样简单：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// render your GUI</span></span><br><span class="line">ImGui::Begin(<span class="string">"Triangle Position/Color"</span>);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">float</span> rotation = <span class="number">0.0</span>;</span><br><span class="line">ImGui::SliderFloat(<span class="string">"rotation"</span>, &amp;rotation, <span class="number">0</span>, <span class="number">2</span> * PI);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">float</span> translation[] = &#123;<span class="number">0.0</span>, <span class="number">0.0</span>&#125;;</span><br><span class="line">ImGui::SliderFloat2(<span class="string">"position"</span>, translation, <span class="number">-1.0</span>, <span class="number">1.0</span>);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">float</span> color[<span class="number">4</span>] = &#123; <span class="number">1.0f</span>,<span class="number">1.0f</span>,<span class="number">1.0f</span>,<span class="number">1.0f</span> &#125;;</span><br><span class="line"><span class="comment">// pass the parameters to the shader</span></span><br><span class="line">triangle_shader.setUniform(<span class="string">"rotation"</span>, rotation);</span><br><span class="line">triangle_shader.setUniform(<span class="string">"translation"</span>, translation[<span class="number">0</span>], translation[<span class="number">1</span>]);</span><br><span class="line"><span class="comment">// color picker</span></span><br><span class="line">ImGui::ColorEdit3(<span class="string">"color"</span>, color);</span><br><span class="line"><span class="comment">// multiply triangle's color with this color</span></span><br><span class="line">triangle_shader.setUniform(<span class="string">"color"</span>, color[<span class="number">0</span>], color[<span class="number">1</span>], color[<span class="number">2</span>]);</span><br></pre></td></tr></table></figure>



<p><img src="/2020/02/27/Dear%20ImGui%20library%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%85%A5%E9%97%A8/conan-imgui-triangle-rotate-color.gif" alt></p>
<p>还有一些基本的绘图工具。</p>
<p>![](Dear ImGui library简介及入门/conan-imgui-logo.png)</p>
<p>如果您想探索不同的库小部件和选项，最好的方法是调用ImGui：ShowDemoWindow（）并查看不同的示例。</p>
<h3 id="Setting-up-a-project-with-Conan"><a href="#Setting-up-a-project-with-Conan" class="headerlink" title="Setting up a project with Conan"></a>Setting up a project with Conan</h3><p>使用Connan建立一个使用ImGui的项目是一个几分钟的问题。这里显示的示例是使用Windows和Visual Studio2017，但在MacOS或Linux中非常相似。</p>
<p>如果您想尝试一下，可以从Connan示例中下载所有文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/conan-io/examples.git</span><br><span class="line"><span class="built_in">cd</span> examples/libraries/dear-imgui/basic</span><br></pre></td></tr></table></figure>



<p>首先，让我们检查CMake项目。它有GLFW和OpenGL3的绑定，还有两个文件来处理OpenGL阴影和文件读取。它还将复制每次重新编译应用程序时呈现三角形的着色器到工作目录。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(dear-imgui-conan CXX)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_PREFIX_PATH <span class="variable">$&#123;CMAKE_BINARY_DIR&#125;</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_MODULE_PATH <span class="variable">$&#123;CMAKE_BINARY_DIR&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># CONFIG option is important so that CMake doesnt search for modules into the default modules directory</span></span><br><span class="line"><span class="keyword">find_package</span>(imgui CONFIG)</span><br><span class="line"><span class="keyword">find_package</span>(glfw CONFIG)</span><br><span class="line"><span class="keyword">find_package</span>(glew CONFIG)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>( dear-imgui-conan </span><br><span class="line">                main.cpp </span><br><span class="line">                opengl_shader.cpp</span><br><span class="line">                file_manager.cpp</span><br><span class="line">                opengl_shader.h </span><br><span class="line">                file_manager.h </span><br><span class="line">                bindings/imgui_impl_glfw.cpp</span><br><span class="line">                bindings/imgui_impl_opengl3.cpp</span><br><span class="line">                bindings/imgui_impl_glfw.h</span><br><span class="line">                bindings/imgui_impl_opengl3.h </span><br><span class="line">                assets/simple-shader.vs</span><br><span class="line">                assets/simple-shader.fs )</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_custom_command</span>(<span class="keyword">TARGET</span> dear-imgui-conan</span><br><span class="line">    POST_BUILD</span><br><span class="line">    <span class="keyword">COMMAND</span> <span class="variable">$&#123;CMAKE_COMMAND&#125;</span> -E copy <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/assets/simple-shader.vs <span class="variable">$&#123;PROJECT_BINARY_DIR&#125;</span></span><br><span class="line">    <span class="keyword">COMMAND</span> <span class="variable">$&#123;CMAKE_COMMAND&#125;</span> -E copy <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/assets/simple-shader.fs <span class="variable">$&#123;PROJECT_BINARY_DIR&#125;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_compile_definitions</span>(dear-imgui-conan PUBLIC IMGUI_IMPL_OPENGL_LOADER_GLEW)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>(dear-imgui-conan imgui::imgui glfw::glfw glew::glew)</span><br></pre></td></tr></table></figure>

<p>我们还需要conanfile来声明它所依赖的库。除了GLF W库，我们还谈到了我们需要GLE W库来处理OpenGL函数加载。我们将使用cmake_multi为Debug和Release配置生成项目。还添加了一个导入部分，以下载GLFW和OpenGL3所需的绑定。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="section">[requires]</span></span><br><span class="line">imgui/1.69@bincrafters/stable</span><br><span class="line">glfw/3.2.1@bincrafters/stable</span><br><span class="line">glew/2.1.0@bincrafters/stable</span><br><span class="line"></span><br><span class="line"><span class="section">[generators]</span></span><br><span class="line">cmake_find_package_multi</span><br><span class="line"></span><br><span class="line"><span class="section">[imports]</span></span><br><span class="line">./misc/bindings, imgui_impl_glfw.cpp -&gt; ../bindings</span><br><span class="line">./misc/bindings, imgui_impl_opengl3.cpp -&gt; ../bindings</span><br><span class="line">./misc/bindings, imgui_impl_glfw.h -&gt; ../bindings</span><br><span class="line">./misc/bindings, imgui_impl_opengl3.h -&gt; ../bindings</span><br></pre></td></tr></table></figure>

<p>现在让我们构建项目并运行应用程序。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> dear-imgui-conan-example</span><br><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">conan install .. -s build_type=Release</span><br><span class="line">conan install .. -s build_type=Debug</span><br><span class="line">cmake .. -G <span class="string">"Visual Studio 15 2017 Win64"</span></span><br><span class="line">cmake --build . --config Release</span><br><span class="line"><span class="built_in">cd</span> Release</span><br><span class="line">dear-imgui-conan</span><br></pre></td></tr></table></figure>

<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>Dear ImGui是一个强大的库，具有易于使用的API，它几乎无缝地集成到3D管道启用的应用程序中。它有很多小部件，可以成为一个很好的工具来制作调试软件，如分析器、记录器或任何类型的对象编辑器。此外，目前正在开发新的功能，如对接或多个视图端口。现在是时候体验Dear ImGUI了，并使它与您自己的代码交互了！</p>
<h3 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h3><ol>
<li><a href="https://eliasdaler.github.io/using-imgui-with-sfml-pt2/" target="_blank" rel="noopener">Using ImGui with modern C++ and STL for creating awesome game dev tools. Part 2. Some tips and tricks.</a></li>
<li><a href="https://github.com/ocornut/imgui" target="_blank" rel="noopener">https://github.com/ocornut/imgui</a></li>
<li><a href="https://blog.conan.io/2019/06/26/An-introduction-to-the-Dear-ImGui-library.html" target="_blank" rel="noopener">An introduction to the Dear ImGui library</a></li>
</ol>
<p><a href="https://conan.io/" target="_blank" rel="noopener">https://conan.io/</a></p>
]]></content>
  </entry>
  <entry>
    <title>费曼学习法-教学相长</title>
    <url>/2020/02/27/001.%E8%B4%B9%E6%9B%BC%E5%AD%A6%E4%B9%A0%E6%B3%95-%E6%95%99%E5%AD%A6%E7%9B%B8%E9%95%BF/</url>
    <content><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><blockquote>
<p><em>The person who says he knows what he thinks but cannot express it usually does not know what he thinks.</em></p>
<p>​                                                                                                               <em>— Mortimer Adler</em></p>
</blockquote>
<p>生硬翻译一下是：</p>
<blockquote>
<p> 心里感觉知道，但是不能准确的表达清楚，其实并非真正地知道。</p>
</blockquote>
<h2 id="费曼是谁？"><a href="#费曼是谁？" class="headerlink" title="费曼是谁？"></a>费曼是谁？</h2><p> <strong>理查德·费曼</strong></p>
<p>美国理论物理学家，量子电动力学创始人之一，纳米技术之父。</p>
<ul>
<li>他早年参与了“曼哈顿计划”，是推动世界第一颗原子弹研发的重要人物。</li>
<li>曾参与调查“挑战者号”航天飞机失事事件，并且在电视机前，向全美国人民用一个实验干净清晰的解释了失事原因。</li>
<li>他被认为是爱因斯坦之后最睿智的理论物理学家，也是第一位提出纳米概念的人。</li>
<li>1965年费曼因在量子电动力学方面的贡献获得诺贝尔物理学奖。</li>
<li>除了是个物理学家，费曼还是个作家、艺术家，擅长演奏手鼓，还擅长打开各类保险箱</li>
</ul>
<h2 id="费曼学习法"><a href="#费曼学习法" class="headerlink" title="费曼学习法"></a>费曼学习法</h2><p> 有一种学习方法被归于费曼的名下，虽然并没有事实证据是由费曼提出，但这个方法帮助了很多人快速学习一门技能。 </p>
<p>费曼学习法总共分四部（以下为众多版本之一）：</p>
<h3 id="1，Concept-（概念）"><a href="#1，Concept-（概念）" class="headerlink" title="1，Concept （概念）"></a>1，<strong>C</strong>oncept （概念）</h3><p>选择一个你要学习的<strong>概念</strong>，或者说是技能点;</p>
<h3 id="2，Teach-（教给别人）"><a href="#2，Teach-（教给别人）" class="headerlink" title="2，Teach （教给别人）"></a>2，<strong>T</strong>each （教给别人）</h3><p>想象把这个概念<strong>教</strong>给一个外行（或者八岁小孩）， 不使用任何高级的词汇或复杂的概念(因为使用它们时你很容易又陷入自欺的怪圈),使用小学生都可以听懂的语言。用这种方法讲授时，其实是在迫使自己更深刻的理解这个概念。同样重要的是，会发现自己在那些地方理解的还不够透彻。 </p>
<h3 id="3，Review-（评价）纠错学习"><a href="#3，Review-（评价）纠错学习" class="headerlink" title="3，Review （评价）纠错学习"></a>3，<strong>R</strong>eview （评价）纠错学习</h3><ul>
<li>在步骤二中，不可避免的遇到卡壳 或是难以解释的地方 甚至是遗漏重要的方面，</li>
<li>这其实是很有价值的反馈。</li>
<li>返回到原材料中，有针对性的学习相关的部分。<strong>评价</strong>你自己的教学并找到和原概念的差距。</li>
<li>然后合上原材料，重新回到步骤2.直到你完全通过步骤三。</li>
</ul>
<h3 id="4-Simplify-（简化）回顾和精简，总结"><a href="#4-Simplify-（简化）回顾和精简，总结" class="headerlink" title="4,Simplify （简化）回顾和精简，总结"></a>4,<strong>S</strong>implify （简化）回顾和精简，总结</h3><ul>
<li>经过前面的三步，你已经可以解释这个概念了；</li>
<li>现在回顾这些解释，确保你没有使用任何复杂的语言；</li>
<li>将这些解释大声读出来，如果听起来不够简洁，或者让人困惑，这就说明你在这些地方还可以进一步加深理解。你也可以尝试用常见事物和现象类比来解释。</li>
<li>最后，已经可以用最简洁清晰的语言解释清楚这个概念了。而这时，也表明你真的理解透彻这个概念的实质。</li>
<li>当使用这种方法时，慢慢透过这个方法的每一个步骤，精确地发现还有哪些内容没有理解。</li>
<li>这种学习方式非常高效，很少浪费时间。</li>
</ul>
<h3 id="5，找个实际的人试一下-可选"><a href="#5，找个实际的人试一下-可选" class="headerlink" title="5，找个实际的人试一下(可选)"></a>5，找个实际的人试一下(可选)</h3><h2 id="关于学习的话"><a href="#关于学习的话" class="headerlink" title="关于学习的话"></a>关于学习的话</h2><blockquote>
<p> 概念是一切知识架构的基石。所谓的“独立思考” ，对其最朴素的描述无非是：能够独立地、正确地使用正确的概念。 </p>
<p>​                                                                                             —-李笑来在《新生》一书                 </p>
</blockquote>
<blockquote>
<p>[With first principles thinking] you boil things down to the most fundamental truths … and then reason up from there.</p>
<p>[当你使用基本原则思维时] 你将事情追溯到最基本的真理…然后，从最基本的真理出发，向上逻辑推导。</p>
<p>​                                                                                                —马斯克</p>
</blockquote>
<blockquote>
<p> “<strong>你从头读，尽量往下读，直到你一窍不通时再从头开始，这样坚持往下读，直到你完全读懂为止</strong>”。 </p>
<p>–费曼</p>
</blockquote>
<blockquote>
<p> 董遇字季直,性质讷而好学。人有从学者,遇不肯教,而云“必当先读百遍！”言：“读书百遍，其义自见”。从学者云:“苦渴无日。”遇言“当以‘三余’。”或问“三余”之意,遇言“冬者岁之余,夜者日之余,阴雨者时之余也。 </p>
<p>​                                                                                                                                                            &lt;三国志&gt;</p>
</blockquote>
<blockquote>
<p>​     “是故学然后知不足，教然后知困。知不足然后能自反也，知困然后能自强也。故曰教学相长也。” </p>
<p>​                                                                                         《<a href="https://baike.baidu.com/item/礼记·学记" target="_blank" rel="noopener">礼记·学记</a>》 </p>
<p>PS:  这不就是费曼学习法吗？</p>
</blockquote>
<h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><p>如果你想更多的了解费曼的思想，不妨读读下面几本书。</p>
<ul>
<li><p>《别闹了，费曼先生》</p>
</li>
<li><p>《你干吗在乎别人怎么想？》</p>
</li>
<li><p>《发现的乐趣》</p>
</li>
<li><p>《费曼手札》</p>
</li>
<li><p>《费曼传》</p>
</li>
<li><p>《费曼物理学讲义》</p>
<p>2013年，BBC播出了一个费曼的记录片：The Fantastic Mr. Feynman，1个小时，也可以找来看看。 </p>
</li>
</ul>
<hr>
<p>公众号:  猫爪在线</p>
]]></content>
      <categories>
        <category>自我提升方法论</category>
      </categories>
  </entry>
  <entry>
    <title>教学相长</title>
    <url>/2020/02/27/001.%E6%95%99%E5%AD%A6%E7%9B%B8%E9%95%BF/</url>
    <content><![CDATA[<p>两则典故，关于学习方法，关于教学相长。</p>
<h2 id="教学相长一"><a href="#教学相长一" class="headerlink" title="教学相长一"></a>教学相长一</h2><p><strong>原文</strong></p>
<p>虽有佳（嘉）肴，弗食，不知其旨也；虽有至道，弗学，不知其善也。是故学然后知不足，教然后知困。知不足，然后能自反也。知困，然后能自强也。故曰：教学相长也。兑命曰：“学学半。”其此之谓乎？</p>
<p><strong>译文</strong></p>
<p>即使有美味的菜肴，不吃，不会知道它的味道鲜美；即使有最好的道理，不学，不会知道它的高妙。因此，（通过）学习然后知道（自己）有不足的地方，（通过）教然后知道（自己）有困惑不解的地方。知道（自己）有不足的地方，然后（才）能够督促自己（进一步学习）；知道（自己）有困惑不解的地方，然后才能够自我奋发进取。所以说：教和学是互相促进、共同提高的。《兑命》说：教别人也是自己学习的一半。大概说的就是这个道理吧。</p>
<h2 id="教学相长二"><a href="#教学相长二" class="headerlink" title="教学相长二"></a>教学相长二</h2><p><strong>原文</strong></p>
<p>剑虽利，不厉不断；材虽美，不学不高。虽有嘉肴①，不尝不知其旨②；虽③有善道，不学不达其功。故学然后知不足，教然后知不究④。不足，故自愧而勉；不究，故尽师而熟。由此观之，则教学相长也。</p>
<p><strong>译文</strong></p>
<p>剑刃虽然锐利，不磨就不能斩断他物；人的资质虽然聪颖，不认真学习，就不能提高修养。虽然有美酒佳肴，不亲口品尝，就不能知道它们的味美；虽然有正确的道理，不努力学习，就不能通达它们的功用。所以说，通过学习，然后才会发现自己的不足；通过传授，然后才知道自己研究不深。发现自己的不足，就会心愧而努力学习，知道自己的研究不深，就会遍天下求师而弄透事理。从这些看来，传授与学习是相互促进的。</p>
<p>PS: 古代经典还是很有必要读的，不然死后不好意思见古人！</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><a href="https://www.jianshu.com/p/ec892fcc1261" target="_blank" rel="noopener">费曼读书法  </a></li>
<li><a href="https://baike.baidu.com/item/%E5%AD%A6%E8%AE%B0/1011104?fromtitle=%E7%A4%BC%E8%AE%B0%C2%B7%E5%AD%A6%E8%AE%B0&fromid=5912314" target="_blank" rel="noopener">礼记·学记</a></li>
<li><a href="https://baike.baidu.com/item/%E6%95%99%E5%AD%A6%E7%9B%B8%E9%95%BF/503225?fr=aladdin" target="_blank" rel="noopener">教学相长</a></li>
</ol>
]]></content>
      <categories>
        <category>自我提升方法论</category>
      </categories>
  </entry>
</search>
